printf("HERE IS IN MAIN\n");
printf("last index: %d\n", index);
printf("N: %d\nM: %d\n", db[index].n, db[index].m);

// ++mat_cnt;
			// index = mat_cnt - 1;
			// db = realloc(db, mat_cnt * sizeof(charact));
			// if (!db)
			// 	return -1;


printf("!!!1HERE1!!!\n");
	printf("old index: %d\nold mat cnt: %d\n", *index, *mat_cnt);

printf("!!HERE!!\n");
	printf("new index: %d\nnew mat cnt: %d\n", *index, *mat_cnt);

		//display_matrix(db[0].mat, db[0].n, db[0].m);


		printf("HERE IS DIPLAY!!!!\n");
	printf("N: %d\nM: %d\n", db[*index].n, db[*index].m);
	display_matrix(db[*index].mat, db[*index].n, db[*index].m);


// TODO a F func to swap this bs
				// charact tmp = (*db)[i];
				// (*db)[i] = (*db)[j];
				// (*db)[j] = tmp;
				// WORKING swap_charact(&(*db)[i], &(*db)[j]);



void swap_charact(charact *a, charact *b);

				//not working
void swap_charact(charact *a, charact *b) {
	charact tmp = *a;
	*a = *b;
	*b = tmp;
}


// printf("BEFORE\n");
			// display_db(db, index);

// printf("AFTER\n");
			// display_db(db, index);
			// charact *c;
			// c = malloc(2 * sizeof(charact));
			// c[0].m = 1;
			// c[0].n = 1;
			// c[1].m = 2;
			// c[1].n = 2;
			// printf("c1: %d %d\nc2: %d %d\n", c[0].n, c[0].m, c[1].n, c[1].m);
			// swap_charact(&c[0], &c[1]);
			// printf("c1: %d %d\nc2: %d %d\n", c[0].n, c[0].m, c[1].n, c[1].m);
						